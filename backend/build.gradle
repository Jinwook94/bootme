plugins {
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id "org.asciidoctor.jvm.convert" version '3.3.2'
    id 'com.epages.restdocs-api-spec' version '0.19.0'
    id 'java'
    id 'jacoco'
}

group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.cloud:spring-cloud-aws-core:2.2.6.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'com.amazonaws:aws-java-sdk-s3'
    implementation 'com.amazonaws.secretsmanager:aws-secretsmanager-caching-java:1.0.2'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'com.auth0:java-jwt:3.19.0'
    implementation 'com.auth0:jwks-rsa:0.21.1'
    implementation 'com.google.api-client:google-api-client:1.32.1'
    implementation 'com.google.http-client:google-http-client-jackson2:1.31.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.0'
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
    implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.3'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compileOnly "org.flywaydb:flyway-mysql"
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:2.7.9'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    annotationProcessor 'org.projectlombok:lombok'

    // rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.0'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled true

        xml.destination file("${buildDir}/jacoco/index.xml")
        csv.destination file("${buildDir}/jacoco/index.csv")
        html.destination file("${buildDir}/jacoco/index.html")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [])
                })
        )
    }
    dependsOn test
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            excludes = []
        }
    }
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs/rest')
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    baseDirFollowsSourceFile()
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs/rest")
}

task buildDocument(type: Copy) {
    dependsOn copyDocument
    from file("src/main/resources/static/docs/rest")
    into file("build/resources/main/static/docs/rest")
}

openapi3 {
    servers = [
            {
                url = "https://staging.api.bootme.co.kr"
                description = "스테이징 서버"
            },
            {
                url = "http://localhost:8080"
                description = "로컬"
            }
    ]
    title = 'BootMe API'
    description 'BootMe API 문서'
    version = '0.0.1'
    format = 'json'
    contact = {
        name = 'Jin-wook Kim'
        email = 'kimjinwook94@gmail.com'
    }
    separatePublicApi = false
    outputDirectory = "src/main/resources/static/docs/swagger/open-api-spec"
    outputFileNamePrefix = 'open-api-3.0.1'
}

bootJar {
    def dateTime = new Date().format('yyyy-MMdd-HHmm')
    archivesBaseName = 'bootme-' + dateTime
    archiveFileName = archivesBaseName + '.jar'

    dependsOn(
            buildDocument,
            ':openapi3'
    )
    enabled = true
}
